#!/bin/bash
WORKSPACE=$(pwd)
DEBUG=false

# Check if there is an existing Terraform state
if test -f "$WORKSPACE/tf/terraform.tfstate"; then
  echo "Terraform state exists. Remove any .tfstate, .lock.hcl, and .terraform data."
  exit 1
fi

# Get the user data for the consumer instances
cd "$WORKSPACE/src/" || (echo "Please run from the root of the repository" && exit)
zip ../consumer.zip -r consumer/ utils/ package.json
CONSUMER_ZIP_BASE64=$(cat ../consumer.zip | base64)

# Set the user data in the Terraform variables
cd "$WORKSPACE/tf/"
echo "aws_spot_instance_user_data_base64 = \"$CONSUMER_ZIP_BASE64\"" >> terraform.tfvars

# Deploy the Terraform stack
terraform init

# In debug mode, only run the plan
if [ "$DEBUG" = true ]; then
  terraform plan -var-file ../settings.json
else
  terraform apply -auto-approve -var-file ../settings.json
fi

# In debug mode, don't invoke the Lambda function
if [ "$DEBUG" = true ]; then
  exit 0
fi

# Remove temporary data
sed -i '' '/aws_spot_instance_user_data_base64/d' terraform.tfvars
rm -f ../consumer.zip
rm -f ../producer.zip

# Get the Lambda function ARN from the Terraform outputs
FUNCTION_ARN=$(terraform output -raw lambda_function_arn)
echo "Received function ARN: $FUNCTION_ARN"

echo "Invoking Lambda"
aws lambda invoke \
  --function-name "$FUNCTION_ARN" \
  --invocation-type "Event" \
  --no-cli-pager /dev/null 2>&1
